// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class lendingPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save lendingPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type lendingPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("lendingPool", id.toString(), this);
    }
  }

  static load(id: string): lendingPool | null {
    return changetype<lendingPool | null>(store.get("lendingPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get term(): i32 {
    let value = this.get("term");
    return value!.toI32();
  }

  set term(value: i32) {
    this.set("term", Value.fromI32(value));
  }

  get depositors(): Array<Bytes> {
    let value = this.get("depositors");
    return value!.toBytesArray();
  }

  set depositors(value: Array<Bytes>) {
    this.set("depositors", Value.fromBytesArray(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value!.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get oTokenAddress(): Bytes {
    let value = this.get("oTokenAddress");
    return value!.toBytes();
  }

  set oTokenAddress(value: Bytes) {
    this.set("oTokenAddress", Value.fromBytes(value));
  }
}

export class netValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save netValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type netValue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("netValue", id.toString(), this);
    }
  }

  static load(id: string): netValue | null {
    return changetype<netValue | null>(store.get("netValue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingPool(): Bytes | null {
    let value = this.get("lendingPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPool(value: Bytes | null) {
    if (!value) {
      this.unset("lendingPool");
    } else {
      this.set("lendingPool", Value.fromBytes(<Bytes>value));
    }
  }

  get reserveNormalizedIncome(): BigInt {
    let value = this.get("reserveNormalizedIncome");
    return value!.toBigInt();
  }

  set reserveNormalizedIncome(value: BigInt) {
    this.set("reserveNormalizedIncome", Value.fromBigInt(value));
  }

  get previousNetValue(): BigInt {
    let value = this.get("previousNetValue");
    return value!.toBigInt();
  }

  set previousNetValue(value: BigInt) {
    this.set("previousNetValue", Value.fromBigInt(value));
  }

  get newNetValue(): BigInt {
    let value = this.get("newNetValue");
    return value!.toBigInt();
  }

  set newNetValue(value: BigInt) {
    this.set("newNetValue", Value.fromBigInt(value));
  }

  get previousLiquidityIndex(): BigInt {
    let value = this.get("previousLiquidityIndex");
    return value!.toBigInt();
  }

  set previousLiquidityIndex(value: BigInt) {
    this.set("previousLiquidityIndex", Value.fromBigInt(value));
  }

  get newLiquidityIndex(): BigInt {
    let value = this.get("newLiquidityIndex");
    return value!.toBigInt();
  }

  set newLiquidityIndex(value: BigInt) {
    this.set("newLiquidityIndex", Value.fromBigInt(value));
  }

  get currentLiquidityRate(): BigInt {
    let value = this.get("currentLiquidityRate");
    return value!.toBigInt();
  }

  set currentLiquidityRate(value: BigInt) {
    this.set("currentLiquidityRate", Value.fromBigInt(value));
  }

  get createTimestamp(): i32 {
    let value = this.get("createTimestamp");
    return value!.toI32();
  }

  set createTimestamp(value: i32) {
    this.set("createTimestamp", Value.fromI32(value));
  }
}

export class transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("transaction", id.toString(), this);
    }
  }

  static load(id: string): transaction | null {
    return changetype<transaction | null>(store.get("transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingPool(): Bytes | null {
    let value = this.get("lendingPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPool(value: Bytes | null) {
    if (!value) {
      this.unset("lendingPool");
    } else {
      this.set("lendingPool", Value.fromBytes(<Bytes>value));
    }
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(<Bytes>value));
    }
  }

  get type(): i32 {
    let value = this.get("type");
    return value!.toI32();
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createTimestamp(): i32 {
    let value = this.get("createTimestamp");
    return value!.toI32();
  }

  set createTimestamp(value: i32) {
    this.set("createTimestamp", Value.fromI32(value));
  }
}

export class portfolioTerm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save portfolioTerm entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type portfolioTerm must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("portfolioTerm", id.toString(), this);
    }
  }

  static load(id: string): portfolioTerm | null {
    return changetype<portfolioTerm | null>(store.get("portfolioTerm", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingPool(): Bytes | null {
    let value = this.get("lendingPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPool(value: Bytes | null) {
    if (!value) {
      this.unset("lendingPool");
    } else {
      this.set("lendingPool", Value.fromBytes(<Bytes>value));
    }
  }

  get previousAssetsUnderManagement(): BigInt {
    let value = this.get("previousAssetsUnderManagement");
    return value!.toBigInt();
  }

  set previousAssetsUnderManagement(value: BigInt) {
    this.set("previousAssetsUnderManagement", Value.fromBigInt(value));
  }

  get previousNetValue(): BigInt {
    let value = this.get("previousNetValue");
    return value!.toBigInt();
  }

  set previousNetValue(value: BigInt) {
    this.set("previousNetValue", Value.fromBigInt(value));
  }

  get term(): i32 {
    let value = this.get("term");
    return value!.toI32();
  }

  set term(value: i32) {
    this.set("term", Value.fromI32(value));
  }

  get createTimestamp(): i32 {
    let value = this.get("createTimestamp");
    return value!.toI32();
  }

  set createTimestamp(value: i32) {
    this.set("createTimestamp", Value.fromI32(value));
  }

  get redemptionBeginTimestamp(): i32 {
    let value = this.get("redemptionBeginTimestamp");
    return value!.toI32();
  }

  set redemptionBeginTimestamp(value: i32) {
    this.set("redemptionBeginTimestamp", Value.fromI32(value));
  }

  get purchaseBeginTimestamp(): i32 {
    let value = this.get("purchaseBeginTimestamp");
    return value!.toI32();
  }

  set purchaseBeginTimestamp(value: i32) {
    this.set("purchaseBeginTimestamp", Value.fromI32(value));
  }

  get purchaseEndTimestamp(): i32 {
    let value = this.get("purchaseEndTimestamp");
    return value!.toI32();
  }

  set purchaseEndTimestamp(value: i32) {
    this.set("purchaseEndTimestamp", Value.fromI32(value));
  }

  get previousLiquidityIndex(): BigInt {
    let value = this.get("previousLiquidityIndex");
    return value!.toBigInt();
  }

  set previousLiquidityIndex(value: BigInt) {
    this.set("previousLiquidityIndex", Value.fromBigInt(value));
  }

  get managementFeeRate(): i32 {
    let value = this.get("managementFeeRate");
    return value!.toI32();
  }

  set managementFeeRate(value: i32) {
    this.set("managementFeeRate", Value.fromI32(value));
  }

  get performanceFeeRate(): i32 {
    let value = this.get("performanceFeeRate");
    return value!.toI32();
  }

  set performanceFeeRate(value: i32) {
    this.set("performanceFeeRate", Value.fromI32(value));
  }

  get previousDepositors(): i32 {
    let value = this.get("previousDepositors");
    return value!.toI32();
  }

  set previousDepositors(value: i32) {
    this.set("previousDepositors", Value.fromI32(value));
  }
}

export class depositor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save depositor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type depositor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("depositor", id.toString(), this);
    }
  }

  static load(id: string): depositor | null {
    return changetype<depositor | null>(store.get("depositor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get lendingPool(): Bytes {
    let value = this.get("lendingPool");
    return value!.toBytes();
  }

  set lendingPool(value: Bytes) {
    this.set("lendingPool", Value.fromBytes(value));
  }

  get oTokenAddress(): Bytes {
    let value = this.get("oTokenAddress");
    return value!.toBytes();
  }

  set oTokenAddress(value: Bytes) {
    this.set("oTokenAddress", Value.fromBytes(value));
  }

  get createTimestamp(): i32 {
    let value = this.get("createTimestamp");
    return value!.toI32();
  }

  set createTimestamp(value: i32) {
    this.set("createTimestamp", Value.fromI32(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value!.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }
}
